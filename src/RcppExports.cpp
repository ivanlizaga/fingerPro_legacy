// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// unmix_c
Rcpp::DataFrame unmix_c(SEXP sources, SEXP samples, int trials, int iter, int seed);
RcppExport SEXP _fingerPro_unmix_c(SEXP sourcesSEXP, SEXP samplesSEXP, SEXP trialsSEXP, SEXP iterSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sources(sourcesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< int >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(unmix_c(sources, samples, trials, iter, seed));
    return rcpp_result_gen;
END_RCPP
}
// least_squares_c
Rcpp::DataFrame least_squares_c(SEXP sources, SEXP samples, int iter, int seed);
RcppExport SEXP _fingerPro_least_squares_c(SEXP sourcesSEXP, SEXP samplesSEXP, SEXP iterSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sources(sourcesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(least_squares_c(sources, samples, iter, seed));
    return rcpp_result_gen;
END_RCPP
}
// triangles_random_c
Rcpp::DataFrame triangles_random_c(SEXP sources, SEXP samples, int tracer, int iter, int seed);
RcppExport SEXP _fingerPro_triangles_random_c(SEXP sourcesSEXP, SEXP samplesSEXP, SEXP tracerSEXP, SEXP iterSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sources(sourcesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< int >::type tracer(tracerSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(triangles_random_c(sources, samples, tracer, iter, seed));
    return rcpp_result_gen;
END_RCPP
}
// triangles_virtual_c
Rcpp::DataFrame triangles_virtual_c(SEXP sources, SEXP samples, int tracer, int iter, int seed);
RcppExport SEXP _fingerPro_triangles_virtual_c(SEXP sourcesSEXP, SEXP samplesSEXP, SEXP tracerSEXP, SEXP iterSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sources(sourcesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< int >::type tracer(tracerSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(triangles_virtual_c(sources, samples, tracer, iter, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fingerPro_unmix_c", (DL_FUNC) &_fingerPro_unmix_c, 5},
    {"_fingerPro_least_squares_c", (DL_FUNC) &_fingerPro_least_squares_c, 4},
    {"_fingerPro_triangles_random_c", (DL_FUNC) &_fingerPro_triangles_random_c, 5},
    {"_fingerPro_triangles_virtual_c", (DL_FUNC) &_fingerPro_triangles_virtual_c, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_fingerPro(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
